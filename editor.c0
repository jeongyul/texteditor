/*
 * Augment doubly linked lists with row and column information.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef struct editor_header editor;
struct editor_header {
  tbuf* buffer;
  int row;
  int col;
};

bool is_editor(editor* E);

editor* editor_new();                  /* Creates a new, empty text buffer */
void editor_forward(editor* E);        /* Moves the cursor forward (right) */
void editor_backward(editor* E);       /* Moves the cursor backward (left) */
void editor_insert(editor* E, char c); /* Insert a character before cursor */
void editor_delete(editor* E);         /* Remove character before cursor   */
void editor_up(editor* E);             /* Moves the cursor up              */
void editor_down(editor* E);           /* Moves the cursor down            */

/*** Implementation ***/

/*
bool is_editor(editor* E)
{
    return ((E != NULL) && (is_tbuf(E -> buffer)) && (E -> row == tbuf_row(E -> buffer)) && (E -> col == tbuf_col(E -> buffer)));
}
*/

bool is_editor(editor* E)
{
    if (E == NULL) return false;
    if (!is_tbuf(E -> buffer)) return false;
    if (E -> row != tbuf_row(E -> buffer)) return false;
    if (E -> col != tbuf_col(E -> buffer)) return false;
    return true;
}

editor* editor_new()
//@ensures is_editor(\result);
{
    editor* E = alloc(struct editor_header);
    tbuf* b = tbuf_new();
    E -> buffer = b;
    E -> row = tbuf_row(E -> buffer);
    E -> col = tbuf_col(E -> buffer);
    return E;
}

void editor_forward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
    if (!tbuf_at_right(E -> buffer))
    {
        tbuf_forward(E -> buffer);
        if (E -> buffer -> cursor -> prev -> data == '\n')
        {
            E -> row = E -> row + 1;
            E -> col = 0;
        }
        else
        {
            //@assert E -> buffer -> cursor -> prev -> data != '\n';
            E -> col = E -> col + 1;
        }
    }
}

void editor_backward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
    if (!tbuf_at_left(E -> buffer))
    {
        tbuf_backward(E -> buffer);
        if (E -> buffer -> cursor -> data == '\n')
        {
            E -> row = E -> row - 1;
            E -> col = tbuf_col(E -> buffer);
        }
        else
        {
            E -> col = E -> col - 1;
        }
    }
}

void editor_insert(editor* E, char c)
//@requires is_editor(E);
//@ensures is_editor(E);
{
    tbuf_insert(E -> buffer, c);
    //E -> col = tbuf_col(E -> buffer);
    //E -> row = tbuf_row(E -> buffer);
    if (c == '\n')
    {
        E -> row = E -> row + 1;
        E -> col = 0;
    }
    if (c != '\n' && E -> buffer -> cursor -> prev -> data != '\n')
    {
        E -> col = E -> col + 1;
    }
}

void editor_delete(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
    if (!tbuf_at_left(E -> buffer))
    {
        if (E -> buffer -> cursor -> prev -> data == '\n')
        {
            tbuf_delete(E -> buffer);
            E -> row = E -> row - 1;
            E -> col = tbuf_col(E -> buffer);
        }
        else
        {
            tbuf_delete(E -> buffer);
            E -> col = E -> col - 1;
        }
    }
}


