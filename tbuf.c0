#use <string>
#use <conio>
/*
 * Text buffers as doubly linked lists.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef struct dll_node dll;
struct dll_node {
  char data;
  dll* next;
  dll* prev;
};

typedef struct tbuf_header tbuf;
struct tbuf_header {
  dll* start;  /* the fist node of the list (on the left)  */
  dll* cursor; /* the position where the cursor is displayed */
  dll* end;    /* the last node of the list (on the right) */
};

bool is_tbuf(tbuf* B);

bool tbuf_at_left(tbuf* B);            /* Returns true if the cursor       */
                                       /* is in leftmost position          */
bool tbuf_at_right(tbuf* B);           /* Returns true if the cursor       */
                                       /* is in rightmost position         */

tbuf* tbuf_new();                      /* Creates a new, empty text buffer */
void tbuf_forward(tbuf* B);            /* Moves the cursor forward (right) */
void tbuf_backward(tbuf* B);           /* Moves the cursor backward (left) */
void tbuf_insert(tbuf* B, char c);     /* Insert a character before cursor */
char tbuf_delete(tbuf* B);             /* Remove character before cursor   */
                                       /* (and returns the deleted char)   */

int tbuf_row(tbuf* B);                 /* Returns the row of the cursor    */
int tbuf_col(tbuf* B);                 /* Returns the column of the cursor */

/*** Implementation ***/

bool is_dll_segment(dll* A, dll* B)
{
    if (A == NULL || B == NULL)
    {
        return false;
    }
    if (A == B) return true;
    dll* temp1 = A;
    dll* temp2 = A;
    while (temp1 != B)
    {
        if (temp1 == NULL || temp2 == NULL) return false;
        if (temp1 -> next == NULL) return false;
        if (!(temp1 == temp2 || (temp2 -> prev == temp1 && temp1 -> next == temp2)))
        {
            return false;
        }
        if (temp2 == B) return true;
        temp1 = temp2;
        temp2 = temp2 -> next;//
    }
    //@assert temp1 == B;
    return false;
}


bool is_tbuf(tbuf* B)
{
    return ((B != NULL) && (B -> start != B -> end) && (B -> start != B -> cursor) && is_dll_segment(B -> start, B -> end) && is_dll_segment(B -> start, B -> cursor) && is_dll_segment(B -> cursor, B -> end));
}


bool tbuf_at_left(tbuf* B)
//@requires is_tbuf(B);
{
    return (B -> start -> next == B -> cursor);
}

bool tbuf_at_right(tbuf* B)
//@requires is_tbuf(B);
{
    return (B -> end == B -> cursor);
}

tbuf* tbuf_new()
//@ensures is_tbuf(\result);
{
    tbuf* A = alloc(struct tbuf_header);
    dll* s = alloc(struct dll_node);
    dll* e = alloc(struct dll_node);
    A -> start = s;
    A -> end = e;
    A -> cursor = A -> end;
    A -> start -> next = A -> end;
    A -> end -> prev = A -> start;
    return A;
}

void tbuf_forward(tbuf* B)
//@requires is_tbuf(B);
//@requires !tbuf_at_right(B);
//@ensures is_tbuf(B);
{
    B -> cursor = B -> cursor -> next;
}

void tbuf_backward(tbuf* B)
//@requires is_tbuf(B);
//@requires !tbuf_at_left(B);
//@ensures is_tbuf(B);
{
    B -> cursor = B -> cursor -> prev;
}

char tbuf_delete(tbuf* B)
//@requires is_tbuf(B);
//@requires !tbuf_at_left(B);
//@ensures is_tbuf(B);
{
    char result = B -> cursor -> prev -> data;
    B -> cursor -> prev -> prev -> next = B -> cursor;
    B -> cursor -> prev = B -> cursor -> prev -> prev;

    return result;
}

void tbuf_insert(tbuf* B, char c)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
    dll* add = alloc(struct dll_node);
    add -> data = c;
    add -> prev = B -> cursor -> prev;
    add -> next = B -> cursor;
    add -> prev -> next = add;
    B -> cursor -> prev = add;
}

int tbuf_row(tbuf* B)
//@requires is_tbuf(B);
{
    int count = 1;
    dll* temp1 = B -> start;
    while (temp1 != B -> cursor)
    {
        if (temp1 -> data == '\n')
        {
            count++;
        }
        temp1 = temp1 -> next;
    }
    //@assert temp1 == B ->cursor;
    return count;
}

int tbuf_col(tbuf* B)
//@requires is_tbuf(B);
{
    int count = 0;
    dll* temp1 = B -> start -> next;
    while (temp1 != B -> cursor)
    {
        if (temp1 ->  data == '\n')
        {
            count = -1;
        }
        count++;
        temp1 = temp1 -> next;
    }
    //@assert temp1 == B -> cursor;
    return count;
}


